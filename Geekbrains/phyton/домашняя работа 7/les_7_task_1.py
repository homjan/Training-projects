# 1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
# заданный случайными числами на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.

import random

size = 10
array = []

for i in range(0, size):
    array.append(random.randint(-100,100))
##########################################################

def sort_bubble(array_f):
    n = 1

    while (n < len(array_f)):
        f = 0 #
        for i in range(len(array_f) - n):
            if array_f[i] < array_f[i + 1]:
                array_f[i], array_f[i + 1] = array_f[i + 1], array_f[i]
                f=1

        n += 1
        if(f==0):
            break

    return array_f

# Введение индикатора (флажка F) действительно произошедших во внутреннем цикле обменов уменьшает число лишних проходов
# в случаях с частично отсортированными массивами на входе.
# Перед каждым проходом по внутреннему циклу флажок сбрасывается в 0,
# а после действительно произошедшего обмена устанавливается в 1.
# Если после выхода из внутреннего цикла флажок равен 0, то обменов не было,
# то есть массив отсортирован и можно досрочно выйти из программы сортировки.

print(array)
print(sort_bubble(array))


